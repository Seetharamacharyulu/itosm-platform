services:
  db:
    image: mysql:8.0
    container_name: itosm-mysql
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      MYSQL_DATABASE: "${MYSQL_DATABASE}"
      MYSQL_USER: "${MYSQL_USER}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
    volumes:
      - mysql_data:/var/lib/mysql
      # - ./initdb:/docker-entrypoint-initdb.d  # optional seed scripts
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -u root -p${MYSQL_ROOT_PASSWORD} --silent"]
      interval: 5s
      timeout: 5s
      retries: 30
    # No host port published to avoid 3306 conflicts. If you need host access:
    # ports:
    #   - "3307:3306"

  migrator:
    image: acharyulu013/itosm-migrator:1.0.0
    restart: "no"
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: "production"
      # App-style URL (some code may read this)
      DATABASE_URL: "mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db:3306/${MYSQL_DATABASE}"
      # Drizzle-kit reads individual fields from drizzle.config.ts
      MYSQL_HOST: "db"
      MYSQL_PORT: 3306
      MYSQL_USER: "${MYSQL_USER}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
      MYSQL_DATABASE: "${MYSQL_DATABASE}"
    entrypoint:
      - sh
      - -lc
      - >
        set -e;
        echo 'Running Drizzle MySQL migrations...';
        npx drizzle-kit push

  app:
    image: acharyulu013/itosm-app:1.0.0
    container_name: itosm-app
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
    environment:
      NODE_ENV: "production"
      BIND_HOST: "0.0.0.0"
      PORT: "5000"
      # Use same DSN pattern as migrator
      DATABASE_URL: "mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db:3306/${MYSQL_DATABASE}"
      SESSION_SECRET: "${SESSION_SECRET}"
      # (optional) if your app also reads per-field vars:
      MYSQL_HOST: "db"
      MYSQL_PORT: 3306
      MYSQL_USER: "${MYSQL_USER}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
      MYSQL_DATABASE: "${MYSQL_DATABASE}"
    ports:
      - "5000:5000"
    volumes:
      - uploads_data:/app/uploads
    healthcheck:
      test:
        - CMD-SHELL
        - >
          node -e "const http=require('http');const r=http.request({host:'localhost',port:process.env.PORT||5000,path:'/api/health',timeout:3000},(res)=>process.exit(res.statusCode===200?0:1));r.on('error',()=>process.exit(1));r.end();"
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional reverse proxy at http://localhost:8080  (enable with:  docker compose --profile nginx up -d)
  nginx:
    image: nginx:alpine
    container_name: itosm-nginx
    restart: unless-stopped
    profiles: ["nginx"]
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      app:
        condition: service_started

volumes:
  mysql_data:
  uploads_data:
